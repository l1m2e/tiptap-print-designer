import{c as Q}from"./chunks/utils.CytzSlOG.js";import{d as H,p as g,ah as A,s as F,v as K,$ as W,c as $,o as U,n as tt,k as z,ag as O,j as et,G as at}from"./chunks/framework.CmYBTWAz.js";const nt=H({__name:"IconCloud",props:{class:{},images:{}},setup(D){const S=D,{images:d}=S,m=g(null),l=g(0),R=g([]),I=g([]),w=g([]),o=A({x:0,y:0}),P=g(!1),x=A({x:0,y:0}),X=A({x:0,y:0}),Y=g(null);function Z(t){return 1-(1-t)**3}F(()=>{if(!d)return;I.value=Array.from({length:d.length}).fill(!1);const t=d.map((e,c)=>{const n=document.createElement("canvas");n.width=40,n.height=40;const s=n.getContext("2d");if(!s)return n;const r=new Image;return r.crossOrigin="anonymous",r.src=e,r.onload=()=>{s.clearRect(0,0,n.width,n.height),s.drawImage(r,0,0,40,40),I.value[c]=!0},n});R.value=t}),F(()=>{const t=(d==null?void 0:d.length)||0;if(t===0){w.value=[];return}const e=[],c=2/t,n=Math.PI*(3-Math.sqrt(5));for(let s=0;s<t;s++){const r=s*c-1+c/2,a=Math.sqrt(1-r*r),v=s*n,C=Math.cos(v)*a,p=Math.sin(v)*a;e.push({x:C*100,y:r*100,z:p*100,scale:1,opacity:1,id:s})}w.value=e});function G(t){const e=m.value;if(!e)return;const c=e.getBoundingClientRect(),n=t.clientX-c.left,s=t.clientY-c.top;e.getContext("2d")&&(w.value.forEach(a=>{const v=Math.cos(o.x),C=Math.sin(o.x),p=Math.cos(o.y),i=Math.sin(o.y),h=a.x*p-a.z*i,_=a.x*i+a.z*p,b=a.y*v+_*C,M=e.width/2+h,y=e.height/2+b,u=20*((_+200)/300),f=n-M,q=s-y;if(f*f+q*q<u*u){const T=-Math.atan2(a.y,Math.sqrt(a.x*a.x+a.z*a.z)),E=Math.atan2(a.x,a.z),j=o.x,B=o.y,N=Math.sqrt((T-j)**2+(E-B)**2),L=Math.min(2e3,Math.max(800,N*1e3));Y.value={x:T,y:E,startX:j,startY:B,distance:N,startTime:performance.now(),duration:L}}}),P.value=!0,x.x=t.clientX,x.y=t.clientY)}function J(t){const e=m.value;if(!e)return;const c=e.getBoundingClientRect();if(X.x=t.clientX-c.left,X.y=t.clientY-c.top,P.value){const n=t.clientX-x.x,s=t.clientY-x.y;o.x+=s*.002,o.y+=n*.002,x.x=t.clientX,x.y=t.clientY}}function V(){P.value=!1}return K(()=>{const t=m.value;if(!t)return;const e=t.getContext("2d");if(!e)return;function c(){e.clearRect(0,0,t.width,t.height);const n=t.width/2,s=t.height/2,r=X.x-n,a=X.y-s,v=Math.sqrt(n*n+s*s),p=.003+Math.sqrt(r*r+a*a)/v*.01;if(Y.value){const{startX:i,startY:h,x:_,y:b,startTime:M,duration:y}=Y.value,k=performance.now()-M,u=Math.min(1,k/y),f=Z(u);o.x=i+(_-i)*f,o.y=h+(b-h)*f,u>=1&&(Y.value=null)}else P.value||(o.x+=a/t.height*p,o.y+=r/t.width*p);w.value.forEach((i,h)=>{const _=Math.cos(o.x),b=Math.sin(o.x),M=Math.cos(o.y),y=Math.sin(o.y),k=i.x*M-i.z*y,u=i.x*y+i.z*M,f=i.y*_+u*b,q=(u+200)/300,T=Math.max(.2,Math.min(1,(u+150)/200));e.save(),e.translate(n+k,s+f),e.scale(q,q),e.globalAlpha=T,R.value[h]&&I.value[h]&&e.drawImage(R.value[h],-20,-20,40,40),e.restore()}),l.value=requestAnimationFrame(c)}l.value=requestAnimationFrame(c)}),W(()=>{l.value&&cancelAnimationFrame(l.value)}),(t,e)=>(U(),$("canvas",{ref_key:"canvasRef",ref:m,width:"300",height:"300",class:tt(z(Q)("",t.$props.class)),role:"img","aria-label":"Interactive 3D Image Cloud",onMousedown:G,onMousemove:J,onMouseup:V,onMouseleave:V},null,34))}}),st={class:"grid place-content-center p-6"},it=JSON.parse('{"title":"简介","description":"","frontmatter":{},"headers":[],"relativePath":"guide/start.md","filePath":"guide/start.md"}'),ot={name:"guide/start.md"},lt=Object.assign(ot,{setup(D){const d=["typescript","tiptap","tailwindcss","vite","pnpm","nodedotjs","vuedotjs","eslint","shadcnui/green"].map(m=>`https://cdn.simpleicons.org/${m}`);return(m,l)=>(U(),$("div",null,[l[0]||(l[0]=O('<h1 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h1><p><code>tiptap-print-designer </code>是一个使用 <code>Vue 3</code> 和 <code>Tiptap</code> 构建的所见即所得的富文本打印设计器库。它提供了一个可视化模板设计系统，允许用户创建具有数据绑定功能的打印模板，然后使用实际数据呈现这些模板以进行打印。</p><p>它提供了两个重要组件：设计器 <code>Designer</code> 渲染器<code>Render </code></p><h3 id="设计器" tabindex="-1">设计器 <a class="header-anchor" href="#设计器" aria-label="Permalink to &quot;设计器&quot;">​</a></h3><p>是一个可视化设计器组件，设计器会提供 关联字段 、基础表格 、 数据表格 、 数据格式化 等功能设计阶段的数据模拟功能依赖于 <code>openapiDoc</code></p><h3 id="渲染器" tabindex="-1">渲染器 <a class="header-anchor" href="#渲染器" aria-label="Permalink to &quot;渲染器&quot;">​</a></h3><p>开发者可以把设计好的模板字符串和打印数据传递给渲染器组件，渲染器就会在浏览器上渲染打印内容。渲染器内置了打印功能。在组件渲染完成后用户调用渲染器内部的打印方法即可完成打印</p><hr><h3 id="技术栈" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈" aria-label="Permalink to &quot;技术栈&quot;">​</a></h3>',9)),et("div",st,[at(z(nt),{images:z(d)},null,8,["images"])]),l[1]||(l[1]=O('<p>更多请查看 <a href="https://github.com/l1m2e/tiptap-print-designer/blob/main/packages/core/package.json" target="_blank" rel="noreferrer">package.json</a></p><hr><h3 id="当前功能和路线图" tabindex="-1">当前功能和路线图 <a class="header-anchor" href="#当前功能和路线图" aria-label="Permalink to &quot;当前功能和路线图&quot;">​</a></h3><h4 id="实现的功能" tabindex="-1">实现的功能 <a class="header-anchor" href="#实现的功能" aria-label="Permalink to &quot;实现的功能&quot;">​</a></h4><ul><li>基础编辑功能</li><li>使用数据绑定插入字段</li><li>基础表格</li><li>数据表格</li><li>数据格式化</li><li>插入单文件组件</li></ul><h4 id="计划的功能" tabindex="-1">计划的功能 <a class="header-anchor" href="#计划的功能" aria-label="Permalink to &quot;计划的功能&quot;">​</a></h4><ul><li>QR 码和条形码</li><li>分页符</li><li>使用页眉和页脚进行分页</li></ul>',7))]))}});export{it as __pageData,lt as default};
